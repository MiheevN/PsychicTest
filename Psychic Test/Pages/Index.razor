@page "/"
@inject TestingGroup Group

<h1 class="text-center">Тестирование экстрасенсов</h1>

<div class="row mb-5 mt-5 justify-content-around">
    <div>
        @if (SecretStage)
        {
            <LastResults />
            <h4>Загадайте 2 значное число</h4>

            <button class="btn btn-block btn-primary" @onclick="ConfirmSecret">Загадал</button>
        }
        else
        {
            <CurrentGuesses />
            <h4>Напишите загаданное число</h4>

            <input class="input-group input-group-text @string.Format(InvalidClass ?"alert-danger" : string.Empty)"
                   type="number" min="10" max="99" @bind="NewSecret" placeholder="Введите 2 значное число" />
            <button class="btn btn-block btn-success" @onclick="ConfirmEnter">Отправить</button>
        }
    </div>
    <PsyhicsCards />
</div>
<ExperimentHistory />

@code{
    /// <summary>
    /// 0 - Загадывание числа, 1 - демонстрация догадок, 2 - Результаты
    /// </summary>
    bool SecretStage { get; set; } = true;

    bool InvalidClass;
    sbyte? _secret;
    long? NewSecret
    {
        get => _secret;
        set
        {
            if (value.HasValue && value.Value >= 10 && value.Value <= 99)
            {
                _secret = (sbyte)value.Value;
                InvalidClass = false;
            }
            else
            {
                _secret = null;
                InvalidClass = true;
            }

        }
    }
    void ConfirmSecret()
    {
        SecretStage = false;
        Group.MakeGuesses();
    }

    void ConfirmEnter()
    {
        if (_secret.HasValue && !InvalidClass)
        {
            SecretStage = true;
            Group.CheckGuess(_secret.Value);
            _secret = null;
            InvalidClass = false;
        }
    }
}